@model _3dsGallery.DataLayer.DataBase.Gallery

@{
    ViewBag.Title = $"\"{Model.name}\"";
    string isOld3ds = "true";// (Request.UserAgent.Contains("Nintendo 3DS") && !Request.UserAgent.Contains("New Nintendo 3DS")).ToString().ToLower();
}

@section Styles {
    <link href="~/Content/pagination.min.css" rel="stylesheet" type="text/css" />
}

<div class="section-white">
    <div class="container body-content section-separator-bottom">
        <div class="h2-container">
            <div class="dropdown btn-group pull-right">
                <button class="btn btn-@Model.Style.value dropdown-toggle" type="button" data-toggle="dropdown">Filter</button>
                <ul class="filter-ul dropdown-menu dropdown-menu-right">
                    <li class="active"><a class="filter" value="new" href="#">New</a></li>
                    <li><a class="filter" value="old" href="#">Old</a></li>
                    <li><a class="filter" value="best" href="#">Best</a></li>
                    <li><a class="filter" value="3d" href="#">3D</a></li>
                    <li><a class="filter" value="2d" href="#">2D</a></li>
                </ul>
            </div>
            <h2 class="text-@Model.Style.value gallery-name">@Model.name <img id="loading" src="~/Content/loading_black.gif" height="25" width="25" hidden /></h2>
        </div>
        <p class="gallery-desc">@Model.info</p>
        @if (Model.User.login == User.Identity.Name)
        {
            <hr />
            <div class="row text-center">
                <a href="@Url.Action("Delete", "Gallery", new { id = Model.id })" class="btn btn-danger">Delete</a>
                <a href="@Url.Action("Edit", "Gallery", new { id = Model.id })" class="btn btn-info">Edit</a>
                <a href="@Url.Action("AddPicture", "Gallery", new { id = Model.id })" class="btn btn-success">Add image</a>
            </div>
        }
    </div>
</div>

<div class="section-grey">
    <div class="container body-content section-separator-top">
        <div id="picture-data">
            @{ Html.RenderAction("ShowPage", "Picture", new { page = (int)ViewBag.Page, filter = ViewBag.Filter, gallery = Model.id }); }
        </div>

        @{
            int pages = (int)ViewBag.Pages;
            int page = (int)ViewBag.Page;
            if (pages > 1)
            {
                <div id="pagination" class="t-slate-gray text-center"></div>
            }
        }
    </div>
</div>


@section scripts {
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>
    @if (bool.Parse(isOld3ds))
    {
        <script>
            (function ($) {

    $.fn.pagination = function (pageUrl, totalPages, options) {

        var thisElement = this;
        var defaultSettings = getDefaultSettings();
        var settings = $.extend({}, defaultSettings, options);
        var style = getDefaultStyles();

        style[settings.paginationStyle].create(settings.currentPage, totalPages);


        
        function getDefaultSettings() {
            return {
                currentPage: 1,
                urlParameters: {},                  // Додаткові параметри сторінки, яка завантажується.
                dontLoadActiveOrDisabledPage: true, // true - не завантажує сторінки з класами "active" чи "disabled".
                paginationStyle: "allPages",        // "allPages", "allPagesShrink".
                paginationStyleFlexible: false,     // true - кількість сторінок підлаштовується під розмір контейнеру.
                visiblePagesCount: 5,               // Кількість сторінок, які відображаються (стилі: "allPagesShrink").
            };
        }
        
        function getDefaultStyles() {
            return {
                
                "allPages": {
                    
                    "create": function (currentPage, totalPages) {

                        $(thisElement).empty();
                        var container = $("<ul/>", { class: "pagination" }).css("display", "block");
                        var pageElement = $("<a/>", { class: "page", 'data-page': 1 });

                        for (var i = 1; i <= totalPages; i++) {
                            var params = $.extend({ page: i }, settings.urlParameters);
                            var clonedPageElement = pageElement.clone(true).attr({ "data-page": i, href: pageUrl + "?" + $.param(params) }).text(i);
                            container.append($("<li/>").append(clonedPageElement));
                        }

                        container.find("a[data-page='" + currentPage + "']").click(function (e) { e.preventDefault(); }).parent("li").addClass("active");
                        $(thisElement).append(container);
                    }
                },
                "allPagesShrink": {
                    
                    "create": function (currentPage, totalPages) {

                        $(thisElement).empty();
                        if (totalPages < 2) {
                            return false;
                        }

                        // Шаблони елементів та контейнер:
                        var container = $("<ul/>", { class: "pagination" }).css("display", "block");
                        var pageElement = $("<a/>", { class: "page", 'data-page': 1 });
                        var dropdown = $("<li/>")
                            .append($("<div/>", { class: "dropup btn-group", style: "display:block" })
                                .append($("<button/>", { class: "btn dropdown-toggle", type: "button", 'data-toggle': "dropdown", text: "..." })));

                        // Данні по сторінкам:
                        var visiblePages = settings.visiblePagesCount;
                        var visiblePagesLeft = totalPages;
                        var visiblePagesRight = totalPages;

                        if (visiblePages >= totalPages) {
                            visiblePages = totalPages;
                        } else {
                            if (visiblePages % 2 == 0) {
                                visiblePagesLeft = visiblePages / 2 - 1;
                                visiblePagesRight = visiblePages / 2;
                            } else {
                                visiblePagesLeft = visiblePagesRight = parseInt(visiblePages / 2);
                            }
                        }
                        var pageFrom = (currentPage - visiblePagesLeft > 0) ? currentPage - visiblePagesLeft : 1;
                        var pageTo = (currentPage + visiblePagesRight < totalPages) ? currentPage + visiblePagesRight : totalPages;
                        if (visiblePages < totalPages) {
                            pageTo = (currentPage - pageFrom < visiblePagesLeft) ? pageTo + (visiblePagesLeft - currentPage + 1) : pageTo;
                            pageFrom = (pageTo - currentPage < visiblePagesRight) ? pageFrom - (visiblePagesRight - (pageTo - currentPage)) : pageFrom;
                        }

                        // Якщо обрана сторінка не перша - створю кнопку "назад"
                        if (currentPage > 1) {
                            var params = $.extend({ page: currentPage - 1 }, settings.urlParameters);
                            $("<li/>")
                                .append(pageElement.clone(true).attr({ "data-page": currentPage - 1, href: pageUrl + "?" + $.param(params) }).addClass("page-nav page-prev").text("<"))
                                .appendTo(container);
                        }

                        // Створюю дропдаун для попередніх сторінок, яких забагато
                        createDropdown(1, pageFrom);

                        // Створюю найближчі видимі кнопки сторінок
                        for (var i = pageFrom; i <= pageTo; i++) {
                            var params = $.extend({ page: i }, settings.urlParameters);
                            $("<li/>")
                                .append(pageElement.clone(true).attr({ "data-page": i, href: pageUrl + "?" + $.param(params) }).text(i))
                                .appendTo(container);
                        }

                        // Створюю дропдаун для наступних сторінок, яких забагато
                        createDropdown(pageTo + 1, totalPages + 1);

                        // Якщо обрана сторінка не остання - створюю кнопку "вперед"
                        if (currentPage < totalPages) {
                            var params = $.extend({ page: currentPage + 1 }, settings.urlParameters);
                            $("<li/>")
                                .append(pageElement.clone(true).attr({ "data-page": currentPage + 1, href: pageUrl + "?" + $.param(params) }).addClass("page-nav page-next").text(">"))
                                .appendTo(container);
                        }

                        // Виділяю обрану сторінку як активну та додаю контейнер в елемент пейджингу
                        container.find("a[data-page='" + currentPage + "']").click(function (e) { e.preventDefault(); }).parent("li").addClass("active");
                        container.appendTo(thisElement);
                        
                        function createDropdown(from, to) {
                            var hiddenElementsList = $("<ul/>", { class: "dropdown-menu" });
                            for (var i = from; i < to; i++) {
                                var params = $.extend({ page: i }, settings.urlParameters);
                                hiddenElementsList
                                    .append($("<li/>")
                                        .append(pageElement.clone(true).attr({ "data-page": i, href: pageUrl + "?" + $.param(params) }).text(i)));
                            }

                            var clonedDropdown = dropdown.clone(true);
                            clonedDropdown.appendTo(container).find("div.dropup").append(hiddenElementsList);
                            if (!clonedDropdown.find(hiddenElementsList).children("li").length) {
                                clonedDropdown.hide();
                            }

                        }
                    }
                }
            };
        }
    }
}(jQuery));
        </script>
        @*<script src="~/Scripts/pagination.min.js"></script>*@
    }
    else
    {
        <script src="~/Scripts/paginationAjax.min.js"></script>
    }
    @RenderPage("~/Views/Shared/MainScripts.cshtml")
    <script>
        @*function pageInit(){
            $(".page").on("click",function(e) {
                if ($(this).parent().hasClass("active"))
                    return false;
            });

            if (@isOld3ds == true) {
                $(".page").each(function(i,e){
                    var filter=$(".dropdown-menu").find(".active").find(".filter").attr("value");
                    $(e).attr("href", '@Url.Action("Details", "Gallery")?id=' + @Model.id + '&page=' + $(e).attr("data-page") + '&filter=' + filter)
                });
                return;
            }

            $(".page").on("click",function(e) {
                $("#loading").show();
                $("body").animate({"scrollTop": "0px"}, 500);
                var pg = $(this).attr("data-page");
                var filter=$(".dropdown-menu").find(".active").find(".filter").attr("value");
                $("#picture-data").load('@Url.Action("ShowPage", "Picture")?page=' + pg + '&filter=' + filter + "&gallery=" + '@Model.id', function() {
                    initImg();
                    pageInit();
                    $("#loading").hide();
                });
            });
        };*@

        $(function () {
            var contentPages = @ViewBag.Pages;
            $(".filter").on("click",function(e) {
                if ($(this).parent().hasClass("active"))
                    return false;
            }).each(function(i,e){
                if ('@ViewBag.Filter' == $(e).attr("value")) {
                    $(this).parent().addClass("active");
                } else {
                    $(this).parent().removeClass("active");
                }
            });

            //pageInit();

            if (@isOld3ds == true) {
                $(".filter").each(function(i,e){
                    $(e).attr("href", '@Url.Action("Details", "Gallery")?page=1&filter=' + $(e).attr("value"))
                });
                $("#pagination").pagination('@Url.Action("Details", "Gallery")', contentPages, {
                    currentPage: @ViewBag.Page,
                    urlParameters: {
                        'filter': '@ViewBag.Filter',
                    },
                    paginationStyle: "allPages",
                    visiblePagesCount:3
                });
                return;
            }

            $("#pagination").paginationAjax('@Url.Action("ShowPage", "Picture")', contentPages, paginationAjaxData);
            $(".filter").on("click",filterItemEventClick);
        });

        var paginationAjaxData = {
            dataElementSelector: "#picture-data",
            urlParameters: getFilterParams(),
            language: "en-US",

            beforeLoadPage: function () {
                loading(true);
                $('html, body').animate({ scrollTop: "0px" });
            },
            afterLoadPageSuccess: function () { loading(false); },
            afterLoadPageError: function () { loading(false); },

            paginationStyle: "allPagesShrink",
            paginationStyleFlexible: true,
            visiblePagesCount: 5
        };

        function loading(isLoading) {
            if (isLoading) {
                $("#loading").show();
                $(".filter-group > a.list-group-item").addClass("disabled");
                $(".pagination li:not(.active)").addClass("disabled");
            } else {
                $("#loading").hide();
                $(".filter-group > a.list-group-item").removeClass("disabled");
                $(".pagination li").removeClass("disabled");
            }
        }

        function getFilterParams(page) {
            var params = {};
            //page = typeof page == "undefined" ? 1 : page;

            params["gallery"] = @Model.id;
            params["filter"] = $(".filter-ul>.active>.filter").attr("value");
            return params;
        }

        function filterItemEventClick(e) {
            loading(true);
            var self = this;
            $(".filter-ul>.active").removeClass("active");
            $(this).parent().addClass("active");
            var urlParams = $.param(getFilterParams());
            $("#picture-data").load('@Url.Action("ShowPage", "Picture")?page=1&' + urlParams, function () {
                initImg();
                $("#pagination").paginationAjax('@Url.Action("ShowPage", "Picture")', contentPages, $.extend(paginationAjaxData, { urlParameters: getFilterParams() }));
                //pageInit();
                loading(false);
            });
        }
    </script>
}
